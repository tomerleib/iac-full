name: Build and Release Apps

on:
  push:
    branches: [main]
    paths:
      - 'apps/**'
  pull_request:
    branches: [main]
    paths:
      - 'apps/**'

# Add concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write

jobs:
  # ─── 1) Figure out which apps actually changed ───────────────────────────────
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_apps: ${{ steps.format.outputs.changed_apps }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.5.0
        with:
          fetch-depth: 2
          token: ${{ secrets.GITHUB_TOKEN }}

      - id: format
        run: |
          files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- apps/)
          # extract unique app folder names
          apps=$(printf "%s\n" $files \
            | grep -oE '^apps/[^/]+' \
            | cut -d/ -f2 \
            | sort -u)
          # build JSON array
          json="[]"
          for app in $apps; do
            json=$(echo $json | jq --arg a "$app" '. + [$a]')
          done
          echo "changed_apps=$json" >> $GITHUB_OUTPUT

  # ─── 2) Build, tag & push each changed app in parallel ──────────────────────
  build-and-push:
    needs: detect-changes
    if: needs.detect-changes.outputs.changed_apps != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        app: ${{ fromJson(needs.detect-changes.outputs.changed_apps) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 2
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Skip if no changes in this app
        id: check_changes
        run: |
          git diff --quiet ${{ github.event.before }} ${{ github.sha }} -- apps/${{ matrix.app }} \
            && echo "skip=true" >> $GITHUB_OUTPUT \
            || echo "skip=false" >> $GITHUB_OUTPUT

      - name: Setup Docker
        if: steps.check_changes.outputs.skip == 'false'
        uses: docker/setup-buildx-action@v3.0.0

      - name: Cache Docker layers
        if: steps.check_changes.outputs.skip == 'false'
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.app }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.app }}-

      - name: Login to DockerHub
        if: steps.check_changes.outputs.skip == 'false'
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # ─── semantic version dry-run ───────────────────────────────────────────────
      - name: Calculate next version (dry run)
        if: steps.check_changes.outputs.skip == 'false'
        id: calc_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: patch
          tag_prefix: "${{ matrix.app }}_v"
          dry_run: true
          fetch_all_tags: true

      - name: Check if tag exists
        if: steps.check_changes.outputs.skip == 'false'
        id: tag_exists
        run: |
          NEXT=${{ steps.calc_version.outputs.new_tag }}
          if git ls-remote --exit-code --tags origin "refs/tags/$NEXT"; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create annotated tag
        if: steps.check_changes.outputs.skip == 'false' && steps.tag_exists.outputs.exists == 'false'
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: patch
          tag_prefix: "${{ matrix.app }}_v"
          create_annotated_tag: true
          fetch_all_tags: true

      - name: Set final new_tag
        if: steps.check_changes.outputs.skip == 'false'
        id: set_new_tag
        run: |
          if [ "${{ steps.tag_exists.outputs.exists }}" == "true" ]; then
            echo "new_tag=${{ steps.calc_version.outputs.new_tag }}" >> $GITHUB_OUTPUT
          else
            echo "new_tag=${{ steps.tag_version.outputs.new_tag }}" >> $GITHUB_OUTPUT
          fi

      - name: Build and Push Docker Image
        if: steps.check_changes.outputs.skip == 'false'
        uses: docker/build-push-action@v5.4.0
        with:
          context: ./apps/${{ matrix.app }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.app }}:${{ steps.set_new_tag.outputs.new_tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Scan Image with Trivy
        if: steps.check_changes.outputs.skip == 'false'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.app }}:${{ steps.set_new_tag.outputs.new_tag }}
          severity: CRITICAL


  finalize:
    needs: [detect-changes, build-and-push]
    if: github.event_name == 'push' && needs.detect-changes.outputs.changed_apps != '[]'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Patch terraform.tfvars for all changed apps
        run: |
          tfvars="terraform/live/terraform.tfvars"
          apps=$(jq -r '.[]' <<< '${{ needs.detect-changes.outputs.changed_apps }}')
          for app in $apps; do
            # pick up the latest per-app tag from the remote
            tag=$(git ls-remote --tags origin "refs/tags/${app}_v*" \
                  | sed 's|.*/||' | sort -V | tail -n1)
            echo "→ $app → $tag"
            esc=$(printf '%s' "$app" | sed 's/[][\/.^$*]/\\&/g')
            sed -i "/$esc *= *{/,/}/s/\(tag *= *\).*/\1\"$tag\"/" "$tfvars"
          done

      - name: Detect tfvars changes
        id: git-check
        run: |
          if git status --porcelain terraform/live/terraform.tfvars | grep .; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit & Push tfvars
        if: steps.git-check.outputs.changes == 'true'
        run: |
          git add terraform/live/terraform.tfvars
          git commit -m "chore: update app image tags after builds"
          git push origin main
