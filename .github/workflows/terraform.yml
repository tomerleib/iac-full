name: Terraform Plan and Apply

on:
  pull_request:
    paths:
      - 'terraform/**'
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: 'terraform/live'
    permissions:
      pull-requests: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: engineerd/setup-kind@v0.6.2 
      - uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt
        if: github.event_name == 'pull_request'
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        if: github.event_name == 'pull_request'
        id: init
        run: terraform init -input=false

      - name: Terraform Validate
        if: github.event_name == 'pull_request'
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`terraform/live\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.event_name == 'pull_request'
        id: apply
        run: terraform apply -auto-approve
        continue-on-error: true

      - name: Get Pods
        if: github.event_name == 'pull_request'
        id: get_pods
        run: |
          kubectl get pods -n default

          
      - name: Install dependencies
        if: github.event_name == 'pull_request'
        run: |
          python -m pip install --upgrade pip
          pip install requests
  

      - name: Verify Load Balancing Output
        if: github.event_name == 'pull_request'
        working-directory: terraform/live
        run: |
          python e2e/load_balance_test.py --url=http://localhost:8081 --requests=20 --delay=1.0 | tee test_output.log
          if ! grep -q "Load balancing appears to be working!" test_output.log; then
            echo "Load balancing test failed"
            exit 1
          fi
          echo "Load balancing test passed successfully!"
